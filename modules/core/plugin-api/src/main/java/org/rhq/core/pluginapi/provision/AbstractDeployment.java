/*
 * RHQ Management Platform
 * Copyright (C) 2013 Red Hat, Inc.
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2, as
 * published by the Free Software Foundation, and/or the GNU Lesser
 * General Public License, version 2.1, also as published by the Free
 * Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License and the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License
 * and the GNU Lesser General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

package org.rhq.core.pluginapi.provision;

import java.io.File;
import java.util.Set;

import org.rhq.core.domain.configuration.Configuration;

/**
 * A deployment consists of a set of files, a deployment key that has been generated by a deployer and uniquely
 * identifies the deployment and an optional configuration used by the deployer.
 * <p>
 * A deployment could have either been made directly to the local file system or it could have been made through
 * and API call. In the former case, the set of files is the actual set of the files on the local filesystem that
 * can be read. In the latter case the files are merely a logical representation of "something" that has been resolved
 * and don't necessarily have to be locatable on the filesystem.
 *
 * @author Lukas Krejci
 */
abstract class AbstractDeployment implements Deployment {

    private final Type type;
    private final Key deploymentKey;
    private final Configuration deploymentConfiguration;
    private final Set<File> deployedFiles;

    /**
     * Creates a new deployment description instance.
     * @param type the type of the deployment
     * @param deploymentKey the key identifying the deployment
     * @param deploymentConfiguration the configuration of the deployment
     * @param deployedFiles the set of the files that the deployment consists of
     */
    public AbstractDeployment(Type type,
                              Key deploymentKey, Configuration deploymentConfiguration,
                              Set<File> deployedFiles) {

        if (type == null) {
            throw new IllegalArgumentException("type can't be null");
        }

        if (deploymentKey == null) {
            throw new IllegalArgumentException("deploymentKey can't be null");
        }

        this.type = type;
        this.deploymentKey = deploymentKey;
        this.deploymentConfiguration = deploymentConfiguration;
        this.deployedFiles = deployedFiles;
    }

    @Override
    public Type getType() {
        return type;
    }

    @Override
    public Set<File> getDeployedFiles() {
        return deployedFiles;
    }

    /**
     * @return the key uniquely identifying the deployment
     */
    @Override
    public Key getKey() {
        return deploymentKey;
    }

    /**
     * @return the configuration for the deployer to provision this deployment
     */
    public Configuration getDeploymentConfiguration() {
        return deploymentConfiguration;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Deployment)) return false;

        AbstractDeployment that = (AbstractDeployment) o;

        if (!deploymentKey.equals(that.deploymentKey)) return false;

        return true;
    }

    @Override
    public int hashCode() {
        return deploymentKey.hashCode();
    }
}
